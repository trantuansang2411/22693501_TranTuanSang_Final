name: CI
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics check_port_connectivity"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Create .env files
      run: |
        # auth
        echo "MONGODB_AUTH_URI=${{ vars.MONGODB_AUTH_URI || 'mongodb://localhost:27017/auth_test' }}" >> auth/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET || 'test_jwt_secret' }}" >> auth/.env
        echo "PORT=3000" >> auth/.env

        # product
        echo "JWT_SECRET=${{ secrets.JWT_SECRET || 'test_jwt_secret' }}" >> product/.env
        echo "MONGODB_PRODUCT_URI=${{ vars.MONGODB_PRODUCT_URI || 'mongodb://localhost:27017/product_test' }}" >> product/.env
        echo "RABBITMQ_URI=${{ vars.RABBITMQ_URI || 'amqp://guest:guest@localhost:5672' }}" >> product/.env
        echo "RABBITMQ_QUEUE_PRODUCT=${{ vars.RABBITMQ_QUEUE_PRODUCT || 'product_queue' }}" >> product/.env
        echo "RABBITMQ_QUEUE_ORDER=${{ vars.RABBITMQ_QUEUE_ORDER || 'order_queue' }}" >> product/.env
        echo "NODE_ENV=${{ vars.NODE_ENV || 'test' }}" >> product/.env
        echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER || 'testuser' }}" >> product/.env
        echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD || 'testpass' }}" >> product/.env
        echo "ORDER_SERVICE_URL=${{ vars.ORDER_SERVICE_URL || 'http://localhost:3002' }}" >> product/.env
        echo "PORT=3001" >> product/.env

        # order
        echo "MONGODB_ORDER_URI=${{ vars.MONGODB_ORDER_URI || 'mongodb://localhost:27017/order_test' }}" >> order/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET || 'test_jwt_secret' }}" >> order/.env
        echo "RABBITMQ_URI=${{ vars.RABBITMQ_URI || 'amqp://guest:guest@localhost:5672' }}" >> order/.env
        echo "RABBITMQ_QUEUE_ORDER=${{ vars.RABBITMQ_QUEUE_ORDER || 'order_queue' }}" >> order/.env
        echo "PORT=3002" >> order/.env

    - name: Install dependencies
      run: |
        cd auth && npm ci && cd ..
        cd product && npm ci && cd ..
        cd order && npm ci && cd ..

    - name: Run Auth unit tests
      run: |
        cd auth
        npm test
        cd ..

    - name: Start Auth and Order services
      run: |
        # Start Auth (port 3000)
        cd auth
        npm start &
        echo $! > ../auth.pid
        cd ..

        echo "Waiting for Auth..."
        # Wait and create test user
        sleep 8
        curl -s -X POST http://localhost:3000/register \
          -H "Content-Type: application/json" \
          -d "{\"username\":\"${{ secrets.LOGIN_TEST_USER || 'testuser' }}\",\"password\":\"${{ secrets.LOGIN_TEST_PASSWORD || 'testpass' }}\"}" \
          || echo "User may already exist"

        # Start Order (port 3002)
        cd order
        npm start &
        echo $! > ../order.pid
        cd ..

        echo "Waiting for Order..."
        sleep 8

    - name: Run Product tests
      env:
        LOGIN_TEST_USER: ${{ secrets.LOGIN_TEST_USER || 'testuser' }}
        LOGIN_TEST_PASSWORD: ${{ secrets.LOGIN_TEST_PASSWORD || 'testpass' }}
      run: |
        cd product
        npm test
        cd ..

    - name: Cleanup
      if: always()
      run: |
        if [ -f auth.pid ]; then kill $(cat auth.pid) 2>/dev/null || true; fi
        if [ -f order.pid ]; then kill $(cat order.pid) 2>/dev/null || true; fi
